//Базовые операторы, математика

// (5*2) - Операнд это 5 и 2
// Унарным называется оператор, который применяется к одному операнду
let x = 1;
x = -x
alert(x);// -1, применили унарный минус
//Бинарным называется оператор, который применяется к двум операндам
let one = 1, two = 3;
alert(two - one);// 2, бинарный минус вычитает значения

//Взятие остатка %
//Результат a % b – это остаток от целочисленного деления a на b.
alert(5 % 2);// 1, остаток от деления 5 на 2
alert(8 % 3);// 2, остаток от деления 8 на 3
alert(8 % 4);// 0, остаток от деления 8 на 4

//Возведение в степень **
// Оператор возведения в степень a ** b возводит a в степень b.
alert(2 ** 2);// 2² = 4
alert(2 ** 3);// 2³ = 8
alert(2 ** 4);// 2⁴ = 16
//Например, квадратный корень является возведением в степень 1/2:
alert(4 ** (1 / 2));// 2 (степень 1/2 эквивалентна взятию квадратного корня)
alert(8 ** (1 / 3));// 2 (степень 1/3 эквивалентна взятию кубического корня)

//Бинарный +
//если бинарный оператор '+' применить к строкам, то он их объединяет в одну:
let Mystr = "my" + "string";
alert(Mystr);//mystring

// если хотя бы один операнд является строкой, то второй будет также преобразован в строку.
alert('1' + 2);// 12
alert(2 + '1');// 21
//пример посложнее:
alert(2 + 2 + '1');// будет "41", а не "221"

// Другие арифметические операторы работают только с числами
//вычитание и деление:
alert(6 - '2'); // 4, '2' приводится к числу
alert('6' / '2'); // 3, оба операнда приводятся к числам

//Унарный +

// Не влияет на числа
let z = 1;
alert(+z);
let y = -2
alert(+y);
// Преобразует не числа в числа
alert(+true); // 1
alert(+"");   // 0

//используем унарный плюс, чтобы преобразовать к числу:
let apples = "2";
let oranges = "3";
alert(+apples + +oranges);// 5
// более длинный вариант alert( Number(apples) + Number(oranges) ); = 5
//Приоритет операторов (приоритет унарных операторов выше, чем соответствующих бинарных)
//Так как «унарный плюс» имеет приоритет 15, который выше, чем 12 у «сложения» (бинарный плюс),
//то в выражении "+apples + +oranges" сначала выполнятся унарные плюсы, а затем сложение.
let q = 2 * 2 + 1;
alert(q); // 5

//Присваивание = возвращает значение
let a = 1;
let b = 2;
let c = 3 - (a = b + 1);
alert(a); //3
alert(c); //0

//Сокращённая арифметика с присваиванием
let n = 2;
n = n + 5;// теперь n = 7 (работает как n = n + 5)
n = n * 2;// теперь n = 14 (работает как n = n * 2)
alert(n); // 14
// укороченная версия
//let n = 2;
//n += 5; // теперь n = 7 (работает как n = n + 5)
//n *= 2; // теперь n = 14 (работает как n = n * 2)
let t = 2;
t *= 3 = 5;
alert(n);// 16 (сначала выполнится правая часть, выражение идентично n *= 8)

//Инкремент/декремент
//Инкремент ++ увеличивает переменную на 1:
let counter = 2; 
counter++;  // работает как counter = counter + 1, просто запись короче
alert( counter ); // 3
//Декремент -- уменьшает переменную на 1:
let counter2 = 2;
counter2--;        // работает как counter = counter - 1, просто запись короче
alert( counter2 ); // 1
//Инкремент/декремент можно применить только к переменной.
//Попытка использовать его на значении, типа 5++, приведёт к ошибке.

//Если хочется тут же использовать результат, то нужна префиксная форма:
let counter3 = 0;
alert( ++counter3 ); // 1

//Если нужно увеличить и при этом получить значение переменной до увеличения – нужна постфиксная форма:
let counter4 = 0;
alert( counter4++ ); // 0

// Поддерживаются следующие побитовые операторы:
// AND(и) ( & )
// OR(или) ( | )
// XOR(побитовое исключающее или) ( ^ )
// NOT(не) ( ~ )
// LEFT SHIFT(левый сдвиг) ( << )
// RIGHT SHIFT(правый сдвиг) ( >> )
// ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )

//Оператор «запятая»
//Каждое выражение выполняется, но возвращается результат только последнего.
let s = (1 + 2, 3 + 4);
alert( s ); // 7 (результат вычисления 3 + 4)
